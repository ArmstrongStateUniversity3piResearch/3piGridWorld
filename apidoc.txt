3pi/m3pi Navigation API
* write up in report

void followTrack(); // open loop/infinite
boolean followTrack(); // returns true when done
boolean hasTrack(); // returns true if a segment is detected
void gotoPoint(int, int);
boolean gotoIntersection(int, int); // returns true when the robot reaches the desired intersection on 
									// the grid
boolean gotoCorner(int); 			// returns true when the robot reaches the desired corner of
									// the grid always starting at 0 numbered counter-clockwise
boolean gotoEdge(int); 				// returns true when the robot reaches the desired edge of 
									// the grid
									
Implementation (Psuedo):
	
	gotoIntersection
		gotoPoint(x, y);
		if (currX == x && currY == y)
			return true;
		return false;

	gotoCorner
		switch(int c) {
			case 0:
				return gotoIntersection(0, 0);
			case 1:
				return gotoIntersection(MAX, 0);
			case 2:
				return gotoIntersection(MAX, MAX);
			case 3:
				return gotoIntersection(0, MAX);
		}
		
	gotoEdge
		switch(int e) {
			case 0:
				return gotoIntersection(0, currY);
			case 1:
				return gotoIntersection(currX, 0);
			case 2:
				return gotoIntersection(MAX, currY);
			case 3:
				return gotoIntersection(currX, MAX);
		}

									
Scenario:
Grid World Size: 5 x 5
Robot initial position at (0, 0)
Desired Robot goal position at intersection (2, 3)
Planner to generate path for the robot to take.

The most common scenario the 3pi can find itself in is a simple "Go-to Point" movement on a Grid World, with a point consisting of one x value and one y value. As an example, a Grid World with a length of 5 and width of 5 arbitrary units would contain points from (0, 0) to (4, 4) due to zero indexing. A desired point can be given using the console prompt and the A, B, and C buttons. The console will display a number starting at zero, with the A button decrementing this number, the C button incrementing this number, and the B button confirming this number. This will be done twice, once for the x value and once for the y value. If the desired point is located at (2, 3), the 3pi will travel along the x-axis until its current x value is 2. Afterwards, the 3pi will travel along the y-axis until its current y value is 3. These values are incremented when the 3pi robot encounters an intersection detected by its sensors. When the 3pi robot's x and y values are equal to the desired point, the robot will await its next instructions from there.

Additional Concentrations:
- how to specify/denote a robot's orientation
- a corollary to that: the need to specify rotation primitives [0, 90/-90, 180, 360 degrees]
